'use strict';

const Joi = require('joi');
const express = require('express');

class CourseServer {
	constructor() {
		this.app = express();
		this.app.use(express.json());
		this.InitializeDB();
		this.RegisterCRUDOperations();
		this.StartService();
	}

	RegisterCRUDOperations()
	{
		this.GetHome();
		this.GetAllCourses();
		this.GetSpecificCourse();
		this.AddCourse();
		this.UpdateExistingCourse();
		this.DeleteCourse();
	}

	GetHome(){
		this.app.get('/', (req, res) => {
			res.send('Hello world!!');
		});
	}

	//Read All
	GetAllCourses(){
		this.app.get('/api/courses', (req, res) => {
			res.send(this.courses);
		});
	}

	// Read specific course details from provided ID.
	GetSpecificCourse(){
		this.app.get('/api/courses/:id', (req, res) =>{
			const course = this.GetCourseFromID(req);
			if (!course) return	res.status(404).send({"message": "The course with given ID was not found"});
			
			res.send(course);
		});
	}


	// Create
	AddCourse(){
		this.app.post('/api/courses', (req, res) => {
			const {error} = this.ValidateCourse(req.body);
			if (error) return res.status(404).send(error.details[0].message);

			const course = {
				id: this.courses.length +1,
				name: req.body.name
			};
			this.courses.push(course);
			res.send(course);
		});
	}

	//Update
	UpdateExistingCourse(){
		this.app.put('/api/courses/:id', (req, res) => {
			const course = this.GetCourseFromID(req);
			if (!course) return res.status(404).send('the course with given ID was not found');

			const {error} = this.ValidateCourse(req.body);
			if (error) return res.status(404).send(error.details[0].message);

			course.name = req.body.name;
			res.send(course);
		});
	}

	//Delete
	DeleteCourse(){
		this.app.delete('/api/courses/:id', (req, res) =>{
			const course = this.courses.find(c => c.id === parseInt(req.params.id));
			if (!course) return res.status(404).send({"message" : "The course with given ID was not found"});
					
			this.courses.splice(this.courses.indexOf(course), 1);
			return res.send(course);
		});
	}

	StartService(){
		const port = process.env.PORT || 3000;
		this.server = this.app.listen(port, () => {
			console.log(`Listening on port ${port}`);
		});
	}

	StopService(){
		this.server.close();
	}

	ValidateCourse(course)
	{
		// Create validation schema.
		const schema = {
			name: Joi.string().min(3).required()
		};

		// Have Joi validate the course object based on the
		// defined validation schema.
		return Joi.validate(this.course, schema);
	}

	GetCourseFromID(req)
	{
		return this.courses.find(c => c.id === parseInt(req.params.id));
	}

	InitializeDB()
	{
		this.courses = [
			{id: 1, name: 'course1'},
			{id: 2, name: 'course2'},
			{id: 3, name: 'course3'},
		];
	}
}
module.exports = CourseServer;



